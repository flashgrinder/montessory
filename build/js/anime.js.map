{"version":3,"names":[],"mappings":"","sources":["anime.js"],"sourcesContent":["/*\r\n * anime.js v3.1.0\r\n * (c) 2019 Julian Garnier\r\n * Released under the MIT license\r\n * animejs.com\r\n */\r\n\r\n'use strict';\r\n\r\n// Defaults\r\n\r\nvar defaultInstanceSettings = {\r\n  update: null,\r\n  begin: null,\r\n  loopBegin: null,\r\n  changeBegin: null,\r\n  change: null,\r\n  changeComplete: null,\r\n  loopComplete: null,\r\n  complete: null,\r\n  loop: 1,\r\n  direction: 'normal',\r\n  autoplay: true,\r\n  timelineOffset: 0\r\n};\r\n\r\nvar defaultTweenSettings = {\r\n  duration: 1000,\r\n  delay: 0,\r\n  endDelay: 0,\r\n  easing: 'easeOutElastic(1, .5)',\r\n  round: 0\r\n};\r\n\r\nvar validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective'];\r\n\r\n// Caching\r\n\r\nvar cache = {\r\n  CSS: {},\r\n  springs: {}\r\n};\r\n\r\n// Utils\r\n\r\nfunction minMax(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\nfunction stringContains(str, text) {\r\n  return str.indexOf(text) > -1;\r\n}\r\n\r\nfunction applyArguments(func, args) {\r\n  return func.apply(null, args);\r\n}\r\n\r\nvar is = {\r\n  arr: function (a) { return Array.isArray(a); },\r\n  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },\r\n  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },\r\n  svg: function (a) { return a instanceof SVGElement; },\r\n  inp: function (a) { return a instanceof HTMLInputElement; },\r\n  dom: function (a) { return a.nodeType || is.svg(a); },\r\n  str: function (a) { return typeof a === 'string'; },\r\n  fnc: function (a) { return typeof a === 'function'; },\r\n  und: function (a) { return typeof a === 'undefined'; },\r\n  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },\r\n  rgb: function (a) { return /^rgb/.test(a); },\r\n  hsl: function (a) { return /^hsl/.test(a); },\r\n  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },\r\n  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; }\r\n};\r\n\r\n// Easings\r\n\r\nfunction parseEasingParameters(string) {\r\n  var match = /\\(([^)]+)\\)/.exec(string);\r\n  return match ? match[1].split(',').map(function (p) { return parseFloat(p); }) : [];\r\n}\r\n\r\n// Spring solver inspired by Webkit Copyright Â© 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js\r\n\r\nfunction spring(string, duration) {\r\n\r\n  var params = parseEasingParameters(string);\r\n  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);\r\n  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);\r\n  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);\r\n  var velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);\r\n  var w0 = Math.sqrt(stiffness / mass);\r\n  var zeta = damping / (2 * Math.sqrt(stiffness * mass));\r\n  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;\r\n  var a = 1;\r\n  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;\r\n\r\n  function solver(t) {\r\n    var progress = duration ? (duration * t) / 1000 : t;\r\n    if (zeta < 1) {\r\n      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));\r\n    } else {\r\n      progress = (a + b * progress) * Math.exp(-progress * w0);\r\n    }\r\n    if (t === 0 || t === 1) { return t; }\r\n    return 1 - progress;\r\n  }\r\n\r\n  function getDuration() {\r\n    var cached = cache.springs[string];\r\n    if (cached) { return cached; }\r\n    var frame = 1/6;\r\n    var elapsed = 0;\r\n    var rest = 0;\r\n    while(true) {\r\n      elapsed += frame;\r\n      if (solver(elapsed) === 1) {\r\n        rest++;\r\n        if (rest >= 16) { break; }\r\n      } else {\r\n        rest = 0;\r\n      }\r\n    }\r\n    var duration = elapsed * frame * 1000;\r\n    cache.springs[string] = duration;\r\n    return duration;\r\n  }\r\n\r\n  return duration ? solver : getDuration;\r\n\r\n}\r\n\r\n// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function\r\n\r\nfunction steps(steps) {\r\n  if ( steps === void 0 ) steps = 10;\r\n\r\n  return function (t) { return Math.round(t * steps) * (1 / steps); };\r\n}\r\n\r\n// BezierEasing https://github.com/gre/bezier-easing\r\n\r\nvar bezier = (function () {\r\n\r\n  var kSplineTableSize = 11;\r\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\r\n\r\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 }\r\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 }\r\n  function C(aA1)      { return 3.0 * aA1 }\r\n\r\n  function calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT }\r\n  function getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) }\r\n\r\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\r\n    var currentX, currentT, i = 0;\r\n    do {\r\n      currentT = aA + (aB - aA) / 2.0;\r\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\r\n      if (currentX > 0.0) { aB = currentT; } else { aA = currentT; }\r\n    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);\r\n    return currentT;\r\n  }\r\n\r\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\r\n    for (var i = 0; i < 4; ++i) {\r\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\r\n      if (currentSlope === 0.0) { return aGuessT; }\r\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\r\n      aGuessT -= currentX / currentSlope;\r\n    }\r\n    return aGuessT;\r\n  }\r\n\r\n  function bezier(mX1, mY1, mX2, mY2) {\r\n\r\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { return; }\r\n    var sampleValues = new Float32Array(kSplineTableSize);\r\n\r\n    if (mX1 !== mY1 || mX2 !== mY2) {\r\n      for (var i = 0; i < kSplineTableSize; ++i) {\r\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\r\n      }\r\n    }\r\n\r\n    function getTForX(aX) {\r\n\r\n      var intervalStart = 0;\r\n      var currentSample = 1;\r\n      var lastSample = kSplineTableSize - 1;\r\n\r\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\r\n        intervalStart += kSampleStepSize;\r\n      }\r\n\r\n      --currentSample;\r\n\r\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\r\n      var guessForT = intervalStart + dist * kSampleStepSize;\r\n      var initialSlope = getSlope(guessForT, mX1, mX2);\r\n\r\n      if (initialSlope >= 0.001) {\r\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\r\n      } else if (initialSlope === 0.0) {\r\n        return guessForT;\r\n      } else {\r\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\r\n      }\r\n\r\n    }\r\n\r\n    return function (x) {\r\n      if (mX1 === mY1 && mX2 === mY2) { return x; }\r\n      if (x === 0 || x === 1) { return x; }\r\n      return calcBezier(getTForX(x), mY1, mY2);\r\n    }\r\n\r\n  }\r\n\r\n  return bezier;\r\n\r\n})();\r\n\r\nvar penner = (function () {\r\n\r\n  // Based on jQuery UI's implemenation of easing equations from Robert Penner (http://www.robertpenner.com/easing)\r\n\r\n  var eases = { linear: function () { return function (t) { return t; }; } };\r\n\r\n  var functionEasings = {\r\n    Sine: function () { return function (t) { return 1 - Math.cos(t * Math.PI / 2); }; },\r\n    Circ: function () { return function (t) { return 1 - Math.sqrt(1 - t * t); }; },\r\n    Back: function () { return function (t) { return t * t * (3 * t - 2); }; },\r\n    Bounce: function () { return function (t) {\r\n      var pow2, b = 4;\r\n      while (t < (( pow2 = Math.pow(2, --b)) - 1) / 11) {}\r\n      return 1 / Math.pow(4, 3 - b) - 7.5625 * Math.pow(( pow2 * 3 - 2 ) / 22 - t, 2)\r\n    }; },\r\n    Elastic: function (amplitude, period) {\r\n      if ( amplitude === void 0 ) amplitude = 1;\r\n      if ( period === void 0 ) period = .5;\r\n\r\n      var a = minMax(amplitude, 1, 10);\r\n      var p = minMax(period, .1, 2);\r\n      return function (t) {\r\n        return (t === 0 || t === 1) ? t : \r\n          -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);\r\n      }\r\n    }\r\n  };\r\n\r\n  var baseEasings = ['Quad', 'Cubic', 'Quart', 'Quint', 'Expo'];\r\n\r\n  baseEasings.forEach(function (name, i) {\r\n    functionEasings[name] = function () { return function (t) { return Math.pow(t, i + 2); }; };\r\n  });\r\n\r\n  Object.keys(functionEasings).forEach(function (name) {\r\n    var easeIn = functionEasings[name];\r\n    eases['easeIn' + name] = easeIn;\r\n    eases['easeOut' + name] = function (a, b) { return function (t) { return 1 - easeIn(a, b)(1 - t); }; };\r\n    eases['easeInOut' + name] = function (a, b) { return function (t) { return t < 0.5 ? easeIn(a, b)(t * 2) / 2 : \r\n      1 - easeIn(a, b)(t * -2 + 2) / 2; }; };\r\n  });\r\n\r\n  return eases;\r\n\r\n})();\r\n\r\nfunction parseEasings(easing, duration) {\r\n  if (is.fnc(easing)) { return easing; }\r\n  var name = easing.split('(')[0];\r\n  var ease = penner[name];\r\n  var args = parseEasingParameters(easing);\r\n  switch (name) {\r\n    case 'spring' : return spring(easing, duration);\r\n    case 'cubicBezier' : return applyArguments(bezier, args);\r\n    case 'steps' : return applyArguments(steps, args);\r\n    default : return applyArguments(ease, args);\r\n  }\r\n}\r\n\r\n// Strings\r\n\r\nfunction selectString(str) {\r\n  try {\r\n    var nodes = document.querySelectorAll(str);\r\n    return nodes;\r\n  } catch(e) {\r\n    return;\r\n  }\r\n}\r\n\r\n// Arrays\r\n\r\nfunction filterArray(arr, callback) {\r\n  var len = arr.length;\r\n  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\r\n  var result = [];\r\n  for (var i = 0; i < len; i++) {\r\n    if (i in arr) {\r\n      var val = arr[i];\r\n      if (callback.call(thisArg, val, i, arr)) {\r\n        result.push(val);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction flattenArray(arr) {\r\n  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);\r\n}\r\n\r\nfunction toArray(o) {\r\n  if (is.arr(o)) { return o; }\r\n  if (is.str(o)) { o = selectString(o) || o; }\r\n  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }\r\n  return [o];\r\n}\r\n\r\nfunction arrayContains(arr, val) {\r\n  return arr.some(function (a) { return a === val; });\r\n}\r\n\r\n// Objects\r\n\r\nfunction cloneObject(o) {\r\n  var clone = {};\r\n  for (var p in o) { clone[p] = o[p]; }\r\n  return clone;\r\n}\r\n\r\nfunction replaceObjectProps(o1, o2) {\r\n  var o = cloneObject(o1);\r\n  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }\r\n  return o;\r\n}\r\n\r\nfunction mergeObjects(o1, o2) {\r\n  var o = cloneObject(o1);\r\n  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }\r\n  return o;\r\n}\r\n\r\n// Colors\r\n\r\nfunction rgbToRgba(rgbValue) {\r\n  var rgb = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(rgbValue);\r\n  return rgb ? (\"rgba(\" + (rgb[1]) + \",1)\") : rgbValue;\r\n}\r\n\r\nfunction hexToRgba(hexValue) {\r\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; } );\r\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  var r = parseInt(rgb[1], 16);\r\n  var g = parseInt(rgb[2], 16);\r\n  var b = parseInt(rgb[3], 16);\r\n  return (\"rgba(\" + r + \",\" + g + \",\" + b + \",1)\");\r\n}\r\n\r\nfunction hslToRgba(hslValue) {\r\n  var hsl = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(hslValue) || /hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(hslValue);\r\n  var h = parseInt(hsl[1], 10) / 360;\r\n  var s = parseInt(hsl[2], 10) / 100;\r\n  var l = parseInt(hsl[3], 10) / 100;\r\n  var a = hsl[4] || 1;\r\n  function hue2rgb(p, q, t) {\r\n    if (t < 0) { t += 1; }\r\n    if (t > 1) { t -= 1; }\r\n    if (t < 1/6) { return p + (q - p) * 6 * t; }\r\n    if (t < 1/2) { return q; }\r\n    if (t < 2/3) { return p + (q - p) * (2/3 - t) * 6; }\r\n    return p;\r\n  }\r\n  var r, g, b;\r\n  if (s == 0) {\r\n    r = g = b = l;\r\n  } else {\r\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n    var p = 2 * l - q;\r\n    r = hue2rgb(p, q, h + 1/3);\r\n    g = hue2rgb(p, q, h);\r\n    b = hue2rgb(p, q, h - 1/3);\r\n  }\r\n  return (\"rgba(\" + (r * 255) + \",\" + (g * 255) + \",\" + (b * 255) + \",\" + a + \")\");\r\n}\r\n\r\nfunction colorToRgb(val) {\r\n  if (is.rgb(val)) { return rgbToRgba(val); }\r\n  if (is.hex(val)) { return hexToRgba(val); }\r\n  if (is.hsl(val)) { return hslToRgba(val); }\r\n}\r\n\r\n// Units\r\n\r\nfunction getUnit(val) {\r\n  var split = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);\r\n  if (split) { return split[1]; }\r\n}\r\n\r\nfunction getTransformUnit(propName) {\r\n  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }\r\n  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }\r\n}\r\n\r\n// Values\r\n\r\nfunction getFunctionValue(val, animatable) {\r\n  if (!is.fnc(val)) { return val; }\r\n  return val(animatable.target, animatable.id, animatable.total);\r\n}\r\n\r\nfunction getAttribute(el, prop) {\r\n  return el.getAttribute(prop);\r\n}\r\n\r\nfunction convertPxToUnit(el, value, unit) {\r\n  var valueUnit = getUnit(value);\r\n  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }\r\n  var cached = cache.CSS[value + unit];\r\n  if (!is.und(cached)) { return cached; }\r\n  var baseline = 100;\r\n  var tempEl = document.createElement(el.tagName);\r\n  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;\r\n  parentEl.appendChild(tempEl);\r\n  tempEl.style.position = 'absolute';\r\n  tempEl.style.width = baseline + unit;\r\n  var factor = baseline / tempEl.offsetWidth;\r\n  parentEl.removeChild(tempEl);\r\n  var convertedUnit = factor * parseFloat(value);\r\n  cache.CSS[value + unit] = convertedUnit;\r\n  return convertedUnit;\r\n}\r\n\r\nfunction getCSSValue(el, prop, unit) {\r\n  if (prop in el.style) {\r\n    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';\r\n    return unit ? convertPxToUnit(el, value, unit) : value;\r\n  }\r\n}\r\n\r\nfunction getAnimationType(el, prop) {\r\n  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || (is.svg(el) && el[prop]))) { return 'attribute'; }\r\n  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }\r\n  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }\r\n  if (el[prop] != null) { return 'object'; }\r\n}\r\n\r\nfunction getElementTransforms(el) {\r\n  if (!is.dom(el)) { return; }\r\n  var str = el.style.transform || '';\r\n  var reg  = /(\\w+)\\(([^)]*)\\)/g;\r\n  var transforms = new Map();\r\n  var m; while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }\r\n  return transforms;\r\n}\r\n\r\nfunction getTransformValue(el, propName, animatable, unit) {\r\n  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);\r\n  var value = getElementTransforms(el).get(propName) || defaultVal;\r\n  if (animatable) {\r\n    animatable.transforms.list.set(propName, value);\r\n    animatable.transforms['last'] = propName;\r\n  }\r\n  return unit ? convertPxToUnit(el, value, unit) : value;\r\n}\r\n\r\nfunction getOriginalTargetValue(target, propName, unit, animatable) {\r\n  switch (getAnimationType(target, propName)) {\r\n    case 'transform': return getTransformValue(target, propName, animatable, unit);\r\n    case 'css': return getCSSValue(target, propName, unit);\r\n    case 'attribute': return getAttribute(target, propName);\r\n    default: return target[propName] || 0;\r\n  }\r\n}\r\n\r\nfunction getRelativeValue(to, from) {\r\n  var operator = /^(\\*=|\\+=|-=)/.exec(to);\r\n  if (!operator) { return to; }\r\n  var u = getUnit(to) || 0;\r\n  var x = parseFloat(from);\r\n  var y = parseFloat(to.replace(operator[0], ''));\r\n  switch (operator[0][0]) {\r\n    case '+': return x + y + u;\r\n    case '-': return x - y + u;\r\n    case '*': return x * y + u;\r\n  }\r\n}\r\n\r\nfunction validateValue(val, unit) {\r\n  if (is.col(val)) { return colorToRgb(val); }\r\n  if (/\\s/g.test(val)) { return val; }\r\n  var originalUnit = getUnit(val);\r\n  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;\r\n  if (unit) { return unitLess + unit; }\r\n  return unitLess;\r\n}\r\n\r\n// getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes\r\n// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744\r\n\r\nfunction getDistance(p1, p2) {\r\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\r\n}\r\n\r\nfunction getCircleLength(el) {\r\n  return Math.PI * 2 * getAttribute(el, 'r');\r\n}\r\n\r\nfunction getRectLength(el) {\r\n  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);\r\n}\r\n\r\nfunction getLineLength(el) {\r\n  return getDistance(\r\n    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, \r\n    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}\r\n  );\r\n}\r\n\r\nfunction getPolylineLength(el) {\r\n  var points = el.points;\r\n  var totalLength = 0;\r\n  var previousPos;\r\n  for (var i = 0 ; i < points.numberOfItems; i++) {\r\n    var currentPos = points.getItem(i);\r\n    if (i > 0) { totalLength += getDistance(previousPos, currentPos); }\r\n    previousPos = currentPos;\r\n  }\r\n  return totalLength;\r\n}\r\n\r\nfunction getPolygonLength(el) {\r\n  var points = el.points;\r\n  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));\r\n}\r\n\r\n// Path animation\r\n\r\nfunction getTotalLength(el) {\r\n  if (el.getTotalLength) { return el.getTotalLength(); }\r\n  switch(el.tagName.toLowerCase()) {\r\n    case 'circle': return getCircleLength(el);\r\n    case 'rect': return getRectLength(el);\r\n    case 'line': return getLineLength(el);\r\n    case 'polyline': return getPolylineLength(el);\r\n    case 'polygon': return getPolygonLength(el);\r\n  }\r\n}\r\n\r\nfunction setDashoffset(el) {\r\n  var pathLength = getTotalLength(el);\r\n  el.setAttribute('stroke-dasharray', pathLength);\r\n  return pathLength;\r\n}\r\n\r\n// Motion path\r\n\r\nfunction getParentSvgEl(el) {\r\n  var parentEl = el.parentNode;\r\n  while (is.svg(parentEl)) {\r\n    if (!is.svg(parentEl.parentNode)) { break; }\r\n    parentEl = parentEl.parentNode;\r\n  }\r\n  return parentEl;\r\n}\r\n\r\nfunction getParentSvg(pathEl, svgData) {\r\n  var svg = svgData || {};\r\n  var parentSvgEl = svg.el || getParentSvgEl(pathEl);\r\n  var rect = parentSvgEl.getBoundingClientRect();\r\n  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');\r\n  var width = rect.width;\r\n  var height = rect.height;\r\n  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);\r\n  return {\r\n    el: parentSvgEl,\r\n    viewBox: viewBox,\r\n    x: viewBox[0] / 1,\r\n    y: viewBox[1] / 1,\r\n    w: width / viewBox[2],\r\n    h: height / viewBox[3]\r\n  }\r\n}\r\n\r\nfunction getPath(path, percent) {\r\n  var pathEl = is.str(path) ? selectString(path)[0] : path;\r\n  var p = percent || 100;\r\n  return function(property) {\r\n    return {\r\n      property: property,\r\n      el: pathEl,\r\n      svg: getParentSvg(pathEl),\r\n      totalLength: getTotalLength(pathEl) * (p / 100)\r\n    }\r\n  }\r\n}\r\n\r\nfunction getPathProgress(path, progress) {\r\n  function point(offset) {\r\n    if ( offset === void 0 ) offset = 0;\r\n\r\n    var l = progress + offset >= 1 ? progress + offset : 0;\r\n    return path.el.getPointAtLength(l);\r\n  }\r\n  var svg = getParentSvg(path.el, path.svg);\r\n  var p = point();\r\n  var p0 = point(-1);\r\n  var p1 = point(+1);\r\n  switch (path.property) {\r\n    case 'x': return (p.x - svg.x) * svg.w;\r\n    case 'y': return (p.y - svg.y) * svg.h;\r\n    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;\r\n  }\r\n}\r\n\r\n// Decompose value\r\n\r\nfunction decomposeValue(val, unit) {\r\n  // const rgx = /-?\\d*\\.?\\d+/g; // handles basic numbers\r\n  // const rgx = /[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\r\n  var rgx = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\r\n  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';\r\n  return {\r\n    original: value,\r\n    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],\r\n    strings: (is.str(val) || unit) ? value.split(rgx) : []\r\n  }\r\n}\r\n\r\n// Animatables\r\n\r\nfunction parseTargets(targets) {\r\n  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];\r\n  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });\r\n}\r\n\r\nfunction getAnimatables(targets) {\r\n  var parsed = parseTargets(targets);\r\n  return parsed.map(function (t, i) {\r\n    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };\r\n  });\r\n}\r\n\r\n// Properties\r\n\r\nfunction normalizePropertyTweens(prop, tweenSettings) {\r\n  var settings = cloneObject(tweenSettings);\r\n  // Override duration if easing is a spring\r\n  if (/^spring/.test(settings.easing)) { settings.duration = spring(settings.easing); }\r\n  if (is.arr(prop)) {\r\n    var l = prop.length;\r\n    var isFromTo = (l === 2 && !is.obj(prop[0]));\r\n    if (!isFromTo) {\r\n      // Duration divided by the number of tweens\r\n      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }\r\n    } else {\r\n      // Transform [from, to] values shorthand to a valid tween value\r\n      prop = {value: prop};\r\n    }\r\n  }\r\n  var propArray = is.arr(prop) ? prop : [prop];\r\n  return propArray.map(function (v, i) {\r\n    var obj = (is.obj(v) && !is.pth(v)) ? v : {value: v};\r\n    // Default delay value should only be applied to the first tween\r\n    if (is.und(obj.delay)) { obj.delay = !i ? tweenSettings.delay : 0; }\r\n    // Default endDelay value should only be applied to the last tween\r\n    if (is.und(obj.endDelay)) { obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0; }\r\n    return obj;\r\n  }).map(function (k) { return mergeObjects(k, settings); });\r\n}\r\n\r\n\r\nfunction flattenKeyframes(keyframes) {\r\n  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) { return Object.keys(key); })), function (p) { return is.key(p); })\r\n  .reduce(function (a,b) { if (a.indexOf(b) < 0) { a.push(b); } return a; }, []);\r\n  var properties = {};\r\n  var loop = function ( i ) {\r\n    var propName = propertyNames[i];\r\n    properties[propName] = keyframes.map(function (key) {\r\n      var newKey = {};\r\n      for (var p in key) {\r\n        if (is.key(p)) {\r\n          if (p == propName) { newKey.value = key[p]; }\r\n        } else {\r\n          newKey[p] = key[p];\r\n        }\r\n      }\r\n      return newKey;\r\n    });\r\n  };\r\n\r\n  for (var i = 0; i < propertyNames.length; i++) loop( i );\r\n  return properties;\r\n}\r\n\r\nfunction getProperties(tweenSettings, params) {\r\n  var properties = [];\r\n  var keyframes = params.keyframes;\r\n  if (keyframes) { params = mergeObjects(flattenKeyframes(keyframes), params); }\r\n  for (var p in params) {\r\n    if (is.key(p)) {\r\n      properties.push({\r\n        name: p,\r\n        tweens: normalizePropertyTweens(params[p], tweenSettings)\r\n      });\r\n    }\r\n  }\r\n  return properties;\r\n}\r\n\r\n// Tweens\r\n\r\nfunction normalizeTweenValues(tween, animatable) {\r\n  var t = {};\r\n  for (var p in tween) {\r\n    var value = getFunctionValue(tween[p], animatable);\r\n    if (is.arr(value)) {\r\n      value = value.map(function (v) { return getFunctionValue(v, animatable); });\r\n      if (value.length === 1) { value = value[0]; }\r\n    }\r\n    t[p] = value;\r\n  }\r\n  t.duration = parseFloat(t.duration);\r\n  t.delay = parseFloat(t.delay);\r\n  return t;\r\n}\r\n\r\nfunction normalizeTweens(prop, animatable) {\r\n  var previousTween;\r\n  return prop.tweens.map(function (t) {\r\n    var tween = normalizeTweenValues(t, animatable);\r\n    var tweenValue = tween.value;\r\n    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;\r\n    var toUnit = getUnit(to);\r\n    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);\r\n    var previousValue = previousTween ? previousTween.to.original : originalValue;\r\n    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;\r\n    var fromUnit = getUnit(from) || getUnit(originalValue);\r\n    var unit = toUnit || fromUnit;\r\n    if (is.und(to)) { to = previousValue; }\r\n    tween.from = decomposeValue(from, unit);\r\n    tween.to = decomposeValue(getRelativeValue(to, from), unit);\r\n    tween.start = previousTween ? previousTween.end : 0;\r\n    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;\r\n    tween.easing = parseEasings(tween.easing, tween.duration);\r\n    tween.isPath = is.pth(tweenValue);\r\n    tween.isColor = is.col(tween.from.original);\r\n    if (tween.isColor) { tween.round = 1; }\r\n    previousTween = tween;\r\n    return tween;\r\n  });\r\n}\r\n\r\n// Tween progress\r\n\r\nvar setProgressValue = {\r\n  css: function (t, p, v) { return t.style[p] = v; },\r\n  attribute: function (t, p, v) { return t.setAttribute(p, v); },\r\n  object: function (t, p, v) { return t[p] = v; },\r\n  transform: function (t, p, v, transforms, manual) {\r\n    transforms.list.set(p, v);\r\n    if (p === transforms.last || manual) {\r\n      var str = '';\r\n      transforms.list.forEach(function (value, prop) { str += prop + \"(\" + value + \") \"; });\r\n      t.style.transform = str;\r\n    }\r\n  }\r\n};\r\n\r\n// Set Value helper\r\n\r\nfunction setTargetsValue(targets, properties) {\r\n  var animatables = getAnimatables(targets);\r\n  animatables.forEach(function (animatable) {\r\n    for (var property in properties) {\r\n      var value = getFunctionValue(properties[property], animatable);\r\n      var target = animatable.target;\r\n      var valueUnit = getUnit(value);\r\n      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);\r\n      var unit = valueUnit || getUnit(originalValue);\r\n      var to = getRelativeValue(validateValue(value, unit), originalValue);\r\n      var animType = getAnimationType(target, property);\r\n      setProgressValue[animType](target, property, to, animatable.transforms, true);\r\n    }\r\n  });\r\n}\r\n\r\n// Animations\r\n\r\nfunction createAnimation(animatable, prop) {\r\n  var animType = getAnimationType(animatable.target, prop.name);\r\n  if (animType) {\r\n    var tweens = normalizeTweens(prop, animatable);\r\n    var lastTween = tweens[tweens.length - 1];\r\n    return {\r\n      type: animType,\r\n      property: prop.name,\r\n      animatable: animatable,\r\n      tweens: tweens,\r\n      duration: lastTween.end,\r\n      delay: tweens[0].delay,\r\n      endDelay: lastTween.endDelay\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAnimations(animatables, properties) {\r\n  return filterArray(flattenArray(animatables.map(function (animatable) {\r\n    return properties.map(function (prop) {\r\n      return createAnimation(animatable, prop);\r\n    });\r\n  })), function (a) { return !is.und(a); });\r\n}\r\n\r\n// Create Instance\r\n\r\nfunction getInstanceTimings(animations, tweenSettings) {\r\n  var animLength = animations.length;\r\n  var getTlOffset = function (anim) { return anim.timelineOffset ? anim.timelineOffset : 0; };\r\n  var timings = {};\r\n  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration; })) : tweenSettings.duration;\r\n  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.delay; })) : tweenSettings.delay;\r\n  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration - anim.endDelay; })) : tweenSettings.endDelay;\r\n  return timings;\r\n}\r\n\r\nvar instanceID = 0;\r\n\r\nfunction createNewInstance(params) {\r\n  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\r\n  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);\r\n  var properties = getProperties(tweenSettings, params);\r\n  var animatables = getAnimatables(params.targets);\r\n  var animations = getAnimations(animatables, properties);\r\n  var timings = getInstanceTimings(animations, tweenSettings);\r\n  var id = instanceID;\r\n  instanceID++;\r\n  return mergeObjects(instanceSettings, {\r\n    id: id,\r\n    children: [],\r\n    animatables: animatables,\r\n    animations: animations,\r\n    duration: timings.duration,\r\n    delay: timings.delay,\r\n    endDelay: timings.endDelay\r\n  });\r\n}\r\n\r\n// Core\r\n\r\nvar activeInstances = [];\r\nvar pausedInstances = [];\r\nvar raf;\r\n\r\nvar engine = (function () {\r\n  function play() { \r\n    raf = requestAnimationFrame(step);\r\n  }\r\n  function step(t) {\r\n    var activeInstancesLength = activeInstances.length;\r\n    if (activeInstancesLength) {\r\n      var i = 0;\r\n      while (i < activeInstancesLength) {\r\n        var activeInstance = activeInstances[i];\r\n        if (!activeInstance.paused) {\r\n          activeInstance.tick(t);\r\n        } else {\r\n          var instanceIndex = activeInstances.indexOf(activeInstance);\r\n          if (instanceIndex > -1) {\r\n            activeInstances.splice(instanceIndex, 1);\r\n            activeInstancesLength = activeInstances.length;\r\n          }\r\n        }\r\n        i++;\r\n      }\r\n      play();\r\n    } else {\r\n      raf = cancelAnimationFrame(raf);\r\n    }\r\n  }\r\n  return play;\r\n})();\r\n\r\nfunction handleVisibilityChange() {\r\n  if (document.hidden) {\r\n    activeInstances.forEach(function (ins) { return ins.pause(); });\r\n    pausedInstances = activeInstances.slice(0);\r\n    anime.running = activeInstances = [];\r\n  } else {\r\n    pausedInstances.forEach(function (ins) { return ins.play(); });\r\n  }\r\n}\r\n\r\nif (typeof document !== 'undefined') {\r\n  document.addEventListener('visibilitychange', handleVisibilityChange);\r\n}\r\n\r\n// Public Instance\r\n\r\nfunction anime(params) {\r\n  if ( params === void 0 ) params = {};\r\n\r\n\r\n  var startTime = 0, lastTime = 0, now = 0;\r\n  var children, childrenLength = 0;\r\n  var resolve = null;\r\n\r\n  function makePromise(instance) {\r\n    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });\r\n    instance.finished = promise;\r\n    return promise;\r\n  }\r\n\r\n  var instance = createNewInstance(params);\r\n  var promise = makePromise(instance);\r\n\r\n  function toggleInstanceDirection() {\r\n    var direction = instance.direction;\r\n    if (direction !== 'alternate') {\r\n      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';\r\n    }\r\n    instance.reversed = !instance.reversed;\r\n    children.forEach(function (child) { return child.reversed = instance.reversed; });\r\n  }\r\n\r\n  function adjustTime(time) {\r\n    return instance.reversed ? instance.duration - time : time;\r\n  }\r\n\r\n  function resetTime() {\r\n    startTime = 0;\r\n    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);\r\n  }\r\n\r\n  function seekChild(time, child) {\r\n    if (child) { child.seek(time - child.timelineOffset); }\r\n  }\r\n\r\n  function syncInstanceChildren(time) {\r\n    if (!instance.reversePlayback) {\r\n      for (var i = 0; i < childrenLength; i++) { seekChild(time, children[i]); }\r\n    } else {\r\n      for (var i$1 = childrenLength; i$1--;) { seekChild(time, children[i$1]); }\r\n    }\r\n  }\r\n\r\n  function setAnimationsProgress(insTime) {\r\n    var i = 0;\r\n    var animations = instance.animations;\r\n    var animationsLength = animations.length;\r\n    while (i < animationsLength) {\r\n      var anim = animations[i];\r\n      var animatable = anim.animatable;\r\n      var tweens = anim.tweens;\r\n      var tweenLength = tweens.length - 1;\r\n      var tween = tweens[tweenLength];\r\n      // Only check for keyframes if there is more than one tween\r\n      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }\r\n      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;\r\n      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);\r\n      var strings = tween.to.strings;\r\n      var round = tween.round;\r\n      var numbers = [];\r\n      var toNumbersLength = tween.to.numbers.length;\r\n      var progress = (void 0);\r\n      for (var n = 0; n < toNumbersLength; n++) {\r\n        var value = (void 0);\r\n        var toNumber = tween.to.numbers[n];\r\n        var fromNumber = tween.from.numbers[n] || 0;\r\n        if (!tween.isPath) {\r\n          value = fromNumber + (eased * (toNumber - fromNumber));\r\n        } else {\r\n          value = getPathProgress(tween.value, eased * toNumber);\r\n        }\r\n        if (round) {\r\n          if (!(tween.isColor && n > 2)) {\r\n            value = Math.round(value * round) / round;\r\n          }\r\n        }\r\n        numbers.push(value);\r\n      }\r\n      // Manual Array.reduce for better performances\r\n      var stringsLength = strings.length;\r\n      if (!stringsLength) {\r\n        progress = numbers[0];\r\n      } else {\r\n        progress = strings[0];\r\n        for (var s = 0; s < stringsLength; s++) {\r\n          var a = strings[s];\r\n          var b = strings[s + 1];\r\n          var n$1 = numbers[s];\r\n          if (!isNaN(n$1)) {\r\n            if (!b) {\r\n              progress += n$1 + ' ';\r\n            } else {\r\n              progress += n$1 + b;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);\r\n      anim.currentValue = progress;\r\n      i++;\r\n    }\r\n  }\r\n\r\n  function setCallback(cb) {\r\n    if (instance[cb] && !instance.passThrough) { instance[cb](instance); }\r\n  }\r\n\r\n  function countIteration() {\r\n    if (instance.remaining && instance.remaining !== true) {\r\n      instance.remaining--;\r\n    }\r\n  }\r\n\r\n  function setInstanceProgress(engineTime) {\r\n    var insDuration = instance.duration;\r\n    var insDelay = instance.delay;\r\n    var insEndDelay = insDuration - instance.endDelay;\r\n    var insTime = adjustTime(engineTime);\r\n    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);\r\n    instance.reversePlayback = insTime < instance.currentTime;\r\n    if (children) { syncInstanceChildren(insTime); }\r\n    if (!instance.began && instance.currentTime > 0) {\r\n      instance.began = true;\r\n      setCallback('begin');\r\n    }\r\n    if (!instance.loopBegan && instance.currentTime > 0) {\r\n      instance.loopBegan = true;\r\n      setCallback('loopBegin');\r\n    }\r\n    if (insTime <= insDelay && instance.currentTime !== 0) {\r\n      setAnimationsProgress(0);\r\n    }\r\n    if ((insTime >= insEndDelay && instance.currentTime !== insDuration) || !insDuration) {\r\n      setAnimationsProgress(insDuration);\r\n    }\r\n    if (insTime > insDelay && insTime < insEndDelay) {\r\n      if (!instance.changeBegan) {\r\n        instance.changeBegan = true;\r\n        instance.changeCompleted = false;\r\n        setCallback('changeBegin');\r\n      }\r\n      setCallback('change');\r\n      setAnimationsProgress(insTime);\r\n    } else {\r\n      if (instance.changeBegan) {\r\n        instance.changeCompleted = true;\r\n        instance.changeBegan = false;\r\n        setCallback('changeComplete');\r\n      }\r\n    }\r\n    instance.currentTime = minMax(insTime, 0, insDuration);\r\n    if (instance.began) { setCallback('update'); }\r\n    if (engineTime >= insDuration) {\r\n      lastTime = 0;\r\n      countIteration();\r\n      if (!instance.remaining) {\r\n        instance.paused = true;\r\n        if (!instance.completed) {\r\n          instance.completed = true;\r\n          setCallback('loopComplete');\r\n          setCallback('complete');\r\n          if (!instance.passThrough && 'Promise' in window) {\r\n            resolve();\r\n            promise = makePromise(instance);\r\n          }\r\n        }\r\n      } else {\r\n        startTime = now;\r\n        setCallback('loopComplete');\r\n        instance.loopBegan = false;\r\n        if (instance.direction === 'alternate') {\r\n          toggleInstanceDirection();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  instance.reset = function() {\r\n    var direction = instance.direction;\r\n    instance.passThrough = false;\r\n    instance.currentTime = 0;\r\n    instance.progress = 0;\r\n    instance.paused = true;\r\n    instance.began = false;\r\n    instance.loopBegan = false;\r\n    instance.changeBegan = false;\r\n    instance.completed = false;\r\n    instance.changeCompleted = false;\r\n    instance.reversePlayback = false;\r\n    instance.reversed = direction === 'reverse';\r\n    instance.remaining = instance.loop;\r\n    children = instance.children;\r\n    childrenLength = children.length;\r\n    for (var i = childrenLength; i--;) { instance.children[i].reset(); }\r\n    if (instance.reversed && instance.loop !== true || (direction === 'alternate' && instance.loop === 1)) { instance.remaining++; }\r\n    setAnimationsProgress(instance.reversed ? instance.duration : 0);\r\n  };\r\n\r\n  // Set Value helper\r\n\r\n  instance.set = function(targets, properties) {\r\n    setTargetsValue(targets, properties);\r\n    return instance;\r\n  };\r\n\r\n  instance.tick = function(t) {\r\n    now = t;\r\n    if (!startTime) { startTime = now; }\r\n    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);\r\n  };\r\n\r\n  instance.seek = function(time) {\r\n    setInstanceProgress(adjustTime(time));\r\n  };\r\n\r\n  instance.pause = function() {\r\n    instance.paused = true;\r\n    resetTime();\r\n  };\r\n\r\n  instance.play = function() {\r\n    if (!instance.paused) { return; }\r\n    if (instance.completed) { instance.reset(); }\r\n    instance.paused = false;\r\n    activeInstances.push(instance);\r\n    resetTime();\r\n    if (!raf) { engine(); }\r\n  };\r\n\r\n  instance.reverse = function() {\r\n    toggleInstanceDirection();\r\n    resetTime();\r\n  };\r\n\r\n  instance.restart = function() {\r\n    instance.reset();\r\n    instance.play();\r\n  };\r\n\r\n  instance.reset();\r\n\r\n  if (instance.autoplay) { instance.play(); }\r\n\r\n  return instance;\r\n\r\n}\r\n\r\n// Remove targets from animation\r\n\r\nfunction removeTargetsFromAnimations(targetsArray, animations) {\r\n  for (var a = animations.length; a--;) {\r\n    if (arrayContains(targetsArray, animations[a].animatable.target)) {\r\n      animations.splice(a, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction removeTargets(targets) {\r\n  var targetsArray = parseTargets(targets);\r\n  for (var i = activeInstances.length; i--;) {\r\n    var instance = activeInstances[i];\r\n    var animations = instance.animations;\r\n    var children = instance.children;\r\n    removeTargetsFromAnimations(targetsArray, animations);\r\n    for (var c = children.length; c--;) {\r\n      var child = children[c];\r\n      var childAnimations = child.animations;\r\n      removeTargetsFromAnimations(targetsArray, childAnimations);\r\n      if (!childAnimations.length && !child.children.length) { children.splice(c, 1); }\r\n    }\r\n    if (!animations.length && !children.length) { instance.pause(); }\r\n  }\r\n}\r\n\r\n// Stagger helpers\r\n\r\nfunction stagger(val, params) {\r\n  if ( params === void 0 ) params = {};\r\n\r\n  var direction = params.direction || 'normal';\r\n  var easing = params.easing ? parseEasings(params.easing) : null;\r\n  var grid = params.grid;\r\n  var axis = params.axis;\r\n  var fromIndex = params.from || 0;\r\n  var fromFirst = fromIndex === 'first';\r\n  var fromCenter = fromIndex === 'center';\r\n  var fromLast = fromIndex === 'last';\r\n  var isRange = is.arr(val);\r\n  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);\r\n  var val2 = isRange ? parseFloat(val[1]) : 0;\r\n  var unit = getUnit(isRange ? val[1] : val) || 0;\r\n  var start = params.start || 0 + (isRange ? val1 : 0);\r\n  var values = [];\r\n  var maxValue = 0;\r\n  return function (el, i, t) {\r\n    if (fromFirst) { fromIndex = 0; }\r\n    if (fromCenter) { fromIndex = (t - 1) / 2; }\r\n    if (fromLast) { fromIndex = t - 1; }\r\n    if (!values.length) {\r\n      for (var index = 0; index < t; index++) {\r\n        if (!grid) {\r\n          values.push(Math.abs(fromIndex - index));\r\n        } else {\r\n          var fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;\r\n          var fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;\r\n          var toX = index%grid[0];\r\n          var toY = Math.floor(index/grid[0]);\r\n          var distanceX = fromX - toX;\r\n          var distanceY = fromY - toY;\r\n          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\r\n          if (axis === 'x') { value = -distanceX; }\r\n          if (axis === 'y') { value = -distanceY; }\r\n          values.push(value);\r\n        }\r\n        maxValue = Math.max.apply(Math, values);\r\n      }\r\n      if (easing) { values = values.map(function (val) { return easing(val / maxValue) * maxValue; }); }\r\n      if (direction === 'reverse') { values = values.map(function (val) { return axis ? (val < 0) ? val * -1 : -val : Math.abs(maxValue - val); }); }\r\n    }\r\n    var spacing = isRange ? (val2 - val1) / maxValue : val1;\r\n    return start + (spacing * (Math.round(values[i] * 100) / 100)) + unit;\r\n  }\r\n}\r\n\r\n// Timeline\r\n\r\nfunction timeline(params) {\r\n  if ( params === void 0 ) params = {};\r\n\r\n  var tl = anime(params);\r\n  tl.duration = 0;\r\n  tl.add = function(instanceParams, timelineOffset) {\r\n    var tlIndex = activeInstances.indexOf(tl);\r\n    var children = tl.children;\r\n    if (tlIndex > -1) { activeInstances.splice(tlIndex, 1); }\r\n    function passThrough(ins) { ins.passThrough = true; }\r\n    for (var i = 0; i < children.length; i++) { passThrough(children[i]); }\r\n    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));\r\n    insParams.targets = insParams.targets || params.targets;\r\n    var tlDuration = tl.duration;\r\n    insParams.autoplay = false;\r\n    insParams.direction = tl.direction;\r\n    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);\r\n    passThrough(tl);\r\n    tl.seek(insParams.timelineOffset);\r\n    var ins = anime(insParams);\r\n    passThrough(ins);\r\n    children.push(ins);\r\n    var timings = getInstanceTimings(children, params);\r\n    tl.delay = timings.delay;\r\n    tl.endDelay = timings.endDelay;\r\n    tl.duration = timings.duration;\r\n    tl.seek(0);\r\n    tl.reset();\r\n    if (tl.autoplay) { tl.play(); }\r\n    return tl;\r\n  };\r\n  return tl;\r\n}\r\n\r\nanime.version = '3.1.0';\r\nanime.speed = 1;\r\nanime.running = activeInstances;\r\nanime.remove = removeTargets;\r\nanime.get = getOriginalTargetValue;\r\nanime.set = setTargetsValue;\r\nanime.convertPx = convertPxToUnit;\r\nanime.path = getPath;\r\nanime.setDashoffset = setDashoffset;\r\nanime.stagger = stagger;\r\nanime.timeline = timeline;\r\nanime.easing = parseEasings;\r\nanime.penner = penner;\r\nanime.random = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };\r\n"],"file":"anime.js"}